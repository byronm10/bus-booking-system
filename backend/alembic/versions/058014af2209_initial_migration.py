"""initial migration

Revision ID: 058014af2209
Revises: 
Create Date: 2025-01-10 22:31:11.379910

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '058014af2209'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('operator_assignments')
    op.drop_table('routes')
    op.drop_table('audit_logs')
    op.drop_table('buses')
    op.drop_table('route_assignments')
    op.drop_table('seats')
    op.drop_table('route_bus_assignments')
    op.drop_table('bookings')
    op.drop_table('users_companies')
    op.alter_column('vehicles', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('vehicles', 'vehicle_type',
               existing_type=postgresql.ENUM('BUS', 'CAMION', 'FURGONETA', 'COCHE', 'MOTO', name='vehicle_type'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('vehicles', 'status',
               existing_type=postgresql.ENUM('ACTIVO', 'EN_RUTA', 'MANTENIMIENTO', 'INACTIVO', 'BAJA', 'AVERIADO', name='vehicle_status'),
               server_default=None,
               existing_nullable=True)
    op.alter_column('vehicles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=True)
    op.drop_constraint('company_number_unique', 'vehicles', type_='unique')
    op.drop_index('idx_vehicles_company_id', table_name='vehicles')
    op.drop_index('vehicles_vin_unique', table_name='vehicles', postgresql_where='(vin IS NOT NULL)')
    op.create_unique_constraint(None, 'vehicles', ['vin'])
    op.drop_constraint('fk_vehicle_company', 'vehicles', type_='foreignkey')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key('fk_vehicle_company', 'vehicles', 'companies', ['company_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'vehicles', type_='unique')
    op.create_index('vehicles_vin_unique', 'vehicles', ['vin'], unique=True, postgresql_where='(vin IS NOT NULL)')
    op.create_index('idx_vehicles_company_id', 'vehicles', ['company_id'], unique=False)
    op.create_unique_constraint('company_number_unique', 'vehicles', ['company_id', 'company_number'])
    op.alter_column('vehicles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('vehicles', 'status',
               existing_type=postgresql.ENUM('ACTIVO', 'EN_RUTA', 'MANTENIMIENTO', 'INACTIVO', 'BAJA', 'AVERIADO', name='vehicle_status'),
               server_default=sa.text("'ACTIVO'::vehicle_status"),
               existing_nullable=True)
    op.alter_column('vehicles', 'vehicle_type',
               existing_type=sa.String(),
               type_=postgresql.ENUM('BUS', 'CAMION', 'FURGONETA', 'COCHE', 'MOTO', name='vehicle_type'),
               existing_nullable=False)
    op.alter_column('vehicles', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('gen_random_uuid()'),
               existing_nullable=False)
    op.create_table('users_companies',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('user_id', 'company_id', name='users_companies_pkey')
    )
    op.create_table('bookings',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('route_assignment_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('seat_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('booking_status', postgresql.ENUM('pending', 'confirmed', 'cancelled', name='booking_status'), autoincrement=False, nullable=False),
    sa.Column('payment_status', postgresql.ENUM('pending', 'paid', 'refunded', name='payment_status'), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['route_assignment_id'], ['route_assignments.id'], name='bookings_route_assignment_id_fkey'),
    sa.ForeignKeyConstraint(['seat_id'], ['seats.id'], name='bookings_seat_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='bookings_pkey')
    )
    op.create_table('route_bus_assignments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('route_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('bus_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['bus_id'], ['buses.id'], name='route_bus_assignments_bus_id_fkey'),
    sa.ForeignKeyConstraint(['route_id'], ['routes.id'], name='route_bus_assignments_route_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='route_bus_assignments_pkey')
    )
    op.create_table('seats',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('bus_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('seat_number', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('seat_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['bus_id'], ['buses.id'], name='seats_bus_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='seats_pkey')
    )
    op.create_table('route_assignments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('route_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('bus_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('assignment_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['bus_id'], ['buses.id'], name='route_assignments_bus_id_fkey'),
    sa.ForeignKeyConstraint(['route_id'], ['routes.id'], name='route_assignments_route_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='route_assignments_pkey')
    )
    op.create_table('buses',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('bus_number', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('plate_number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('capacity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='buses_pkey')
    )
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='audit_logs_pkey')
    )
    op.create_table('routes',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('origin', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('destination', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('departure_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('departure_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('calculated_arrival_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('intermediate_stops', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('route_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('base_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('driver_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='routes_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('operator_assignments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('operator_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('route_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('assigned_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['route_id'], ['routes.id'], name='operator_assignments_route_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='operator_assignments_pkey')
    )
    # ### end Alembic commands ###
