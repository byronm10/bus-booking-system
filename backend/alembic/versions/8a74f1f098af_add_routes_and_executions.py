"""add_routes_and_executions

Revision ID: 8a74f1f098af
Revises: 058014af2209
Create Date: 2025-01-10 23:06:11.563036

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8a74f1f098af'
down_revision: Union[str, None] = '058014af2209'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # First drop tables that depend on others
    tables_to_drop = [
        'bookings',
        'seats',
        'route_bus_assignments',
        'route_assignments',
        'operator_assignments',
        'buses',
        'audit_logs',
        'users_companies'
    ]
    
    for table in tables_to_drop:
        try:
            op.drop_table(table)
        except Exception as e:
            print(f"Warning: Could not drop table {table}: {str(e)}")
            pass

    # Create enums if they don't exist
    op.execute("""
        DO $$ 
        BEGIN
            -- Drop existing types if they exist
            DROP TYPE IF EXISTS route_status CASCADE;
            DROP TYPE IF EXISTS repetition_period CASCADE;
            
            -- Create route_status enum
            CREATE TYPE route_status AS ENUM (
                'ACTIVA',
                'EN_EJECUCION',
                'COMPLETADA',
                'SUSPENDIDA'
            );
            
            -- Create repetition_period enum
            CREATE TYPE repetition_period AS ENUM (
                'DIARIO',
                'SEMANAL',
                'MENSUAL'
            );
        EXCEPTION
            WHEN duplicate_object THEN 
                NULL;
        END $$;
    """)

    # Add intermediate_stops column before dropping the table
    op.add_column('routes', sa.Column('intermediate_stops', postgresql.JSONB(astext_type=sa.Text()), nullable=True))

    # Properly handle the departure_time column conversion
    op.execute("""
        ALTER TABLE routes 
        ALTER COLUMN departure_time TYPE TIMESTAMP WITH TIME ZONE 
        USING departure_time::timestamp with time zone
    """)

    # Add new columns
    op.add_column('routes', sa.Column('name', sa.String(), nullable=False, server_default='Default Route Name'))
    op.add_column('routes', sa.Column('start_point', sa.String(), nullable=False, server_default='Start'))
    op.add_column('routes', sa.Column('end_point', sa.String(), nullable=False, server_default='End'))
    op.add_column('routes', sa.Column('estimated_duration', sa.Integer(), nullable=False, server_default='0'))
    op.add_column('routes', sa.Column('repetition_frequency', sa.Integer(), nullable=True))
    op.add_column('routes', sa.Column('repetition_period', postgresql.ENUM('DIARIO', 'SEMANAL', 'MENSUAL', name='repetition_period', create_type=False), nullable=True))
    op.add_column('routes', sa.Column('status', postgresql.ENUM('ACTIVA', 'EN_EJECUCION', 'COMPLETADA', 'SUSPENDIDA', name='route_status', create_type=False), nullable=True))

    # Remove default values after columns are created
    op.alter_column('routes', 'name', server_default=None)
    op.alter_column('routes', 'start_point', server_default=None)
    op.alter_column('routes', 'end_point', server_default=None)
    op.alter_column('routes', 'estimated_duration', server_default=None)

    # Create route_executions table
    op.create_table('route_executions',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('route_id', sa.UUID(), nullable=False),
        sa.Column('vehicle_id', sa.UUID(), nullable=False),
        sa.Column('actual_start_time', sa.DateTime(timezone=True), nullable=True),
        sa.Column('actual_end_time', sa.DateTime(timezone=True), nullable=True),
        sa.Column('actual_duration', sa.Integer(), nullable=True),
        sa.Column('incidents', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('status', postgresql.ENUM('ACTIVA', 'EN_EJECUCION', 'COMPLETADA', 'SUSPENDIDA', name='route_status', create_type=False), nullable=True),
        sa.ForeignKeyConstraint(['route_id'], ['routes.id'], ),
        sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    # Drop old columns
    op.drop_column('routes', 'destination')
    op.drop_column('routes', 'origin')
    op.drop_column('routes', 'calculated_arrival_time')
    op.drop_column('routes', 'base_price')
    op.drop_column('routes', 'deleted_at')
    op.drop_column('routes', 'route_status')
    op.drop_column('routes', 'deleted_by')
    op.drop_column('routes', 'driver_name')

    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('routes', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('routes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               nullable=True)
    op.create_foreign_key(None, 'routes', 'companies', ['company_id'], ['id'])
    op.alter_column('vehicles', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('vehicles', 'vehicle_type',
               existing_type=postgresql.ENUM('BUS', 'CAMION', 'FURGONETA', 'COCHE', 'MOTO', name='vehicle_type'),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('vehicles', 'status',
               existing_type=postgresql.ENUM('ACTIVO', 'EN_RUTA', 'MANTENIMIENTO', 'INACTIVO', 'BAJA', 'AVERIADO', name='vehicle_status'),
               server_default=None,
               existing_nullable=True)
    op.alter_column('vehicles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=True)
    op.drop_constraint('company_number_unique', 'vehicles', type_='unique')
    op.drop_index('idx_vehicles_company_id', table_name='vehicles')
    op.drop_index('vehicles_vin_unique', table_name='vehicles', postgresql_where='(vin IS NOT NULL)')
    op.create_unique_constraint(None, 'vehicles', ['vin'])
    op.drop_constraint('fk_vehicle_company', 'vehicles', type_='foreignkey')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key('fk_vehicle_company', 'vehicles', 'companies', ['company_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'vehicles', type_='unique')
    op.create_index('vehicles_vin_unique', 'vehicles', ['vin'], unique=True, postgresql_where='(vin IS NOT NULL)')
    op.create_index('idx_vehicles_company_id', 'vehicles', ['company_id'], unique=False)
    op.create_unique_constraint('company_number_unique', 'vehicles', ['company_id', 'company_number'])
    op.alter_column('vehicles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=True)
    op.alter_column('vehicles', 'status',
               existing_type=postgresql.ENUM('ACTIVO', 'EN_RUTA', 'MANTENIMIENTO', 'INACTIVO', 'BAJA', 'AVERIADO', name='vehicle_status'),
               server_default=sa.text("'ACTIVO'::vehicle_status"),
               existing_nullable=True)
    op.alter_column('vehicles', 'vehicle_type',
               existing_type=sa.String(),
               type_=postgresql.ENUM('BUS', 'CAMION', 'FURGONETA', 'COCHE', 'MOTO', name='vehicle_type'),
               existing_nullable=False)
    op.alter_column('vehicles', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('gen_random_uuid()'),
               existing_nullable=False)
    op.add_column('routes', sa.Column('driver_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('routes', sa.Column('deleted_by', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('routes', sa.Column('origin', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('routes', sa.Column('route_status', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('routes', sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('routes', sa.Column('base_price', sa.NUMERIC(), autoincrement=False, nullable=True))
    op.add_column('routes', sa.Column('calculated_arrival_time', postgresql.TIME(), autoincrement=False, nullable=True))
    op.add_column('routes', sa.Column('destination', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('routes', sa.Column('departure_date', sa.DATE(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'routes', type_='foreignkey')
    op.alter_column('routes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               nullable=False)
    op.alter_column('routes', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('routes', 'departure_time',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIME(),
               nullable=True)
    op.drop_column('routes', 'status')
    op.drop_column('routes', 'repetition_period')
    op.drop_column('routes', 'repetition_frequency')
    op.drop_column('routes', 'estimated_duration')
    op.drop_column('routes', 'end_point')
    op.drop_column('routes', 'start_point')
    op.drop_column('routes', 'name')
    op.create_table('route_bus_assignments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('route_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('bus_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['bus_id'], ['buses.id'], name='route_bus_assignments_bus_id_fkey'),
    sa.ForeignKeyConstraint(['route_id'], ['routes.id'], name='route_bus_assignments_route_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='route_bus_assignments_pkey')
    )
    op.create_table('route_assignments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('route_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('bus_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('assignment_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['bus_id'], ['buses.id'], name='route_assignments_bus_id_fkey'),
    sa.ForeignKeyConstraint(['route_id'], ['routes.id'], name='route_assignments_route_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='route_assignments_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('bookings',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('route_assignment_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('seat_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('booking_status', postgresql.ENUM('pending', 'confirmed', 'cancelled', name='booking_status'), autoincrement=False, nullable=False),
    sa.Column('payment_status', postgresql.ENUM('pending', 'paid', 'refunded', name='payment_status'), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['route_assignment_id'], ['route_assignments.id'], name='bookings_route_assignment_id_fkey'),
    sa.ForeignKeyConstraint(['seat_id'], ['seats.id'], name='bookings_seat_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='bookings_pkey')
    )
    op.create_table('buses',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('bus_number', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('plate_number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('capacity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='buses_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('users_companies',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('user_id', 'company_id', name='users_companies_pkey')
    )
    op.create_table('seats',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('bus_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('seat_number', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('seat_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['bus_id'], ['buses.id'], name='seats_bus_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='seats_pkey')
    )
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='audit_logs_pkey')
    )
    op.create_table('operator_assignments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('operator_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('route_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('assigned_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['route_id'], ['routes.id'], name='operator_assignments_route_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='operator_assignments_pkey')
    )
    op.drop_table('route_executions')
    # ### end Alembic commands ###
